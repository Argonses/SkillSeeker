@page "/orderedCourses"
@inject IOrderedCourseService OrderedCourseService

<link href="/css/OrderedCoursesStyle.css" rel="stylesheet" />

<h3>Ordered Courses Page</h3>

<div class="ordered-courses-container">
    @if (OrderedCourseService.OrderedCourses != null && OrderedCourseService.OrderedCourses.Any())
    {
        @foreach (var orderedCourse in OrderedCourseService.OrderedCourses)
        {
            <div class="ordered-course-card">
                <div class="card">
                    <img src="@orderedCourse.ImageUrl" class="card-img-top" alt="Course Image">
                    <div class="card-body">
                        <h5 class="card-title">@orderedCourse.Name</h5>
                        <p class="card-text">@orderedCourse.Category</p>
                        <p class="card-text">@orderedCourse.Location</p>
                        <p class="card-text">@orderedCourse.StartDate.ToString("yyyy-MM-dd")</p>
                        <p class="card-text">@orderedCourse.EndDate.ToString("yyyy-MM-dd")</p>
                        <p class="card-text">Price: $@orderedCourse.Price</p>
                        <a class="btn btn-danger" @onclick="() => LeaveCourse(orderedCourse.Id)">Leave!</a>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No ordered courses found.</p>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await OrderedCourseService.GetAllOrderedCourses();
    }

    private async Task LeaveCourse(int id)
    {
        await OrderedCourseService.LeaveCourse(id);
        await OrderedCourseService.GetAllOrderedCourses();
    }
}
